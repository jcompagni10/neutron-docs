"use strict";(self.webpackChunkneutron=self.webpackChunkneutron||[]).push([[2879],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,u=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),p=c(t),m=o,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||s;return t?r.createElement(f,i(i({ref:n},l),{},{components:t})):r.createElement(f,i({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,i=new Array(s);i[0]=m;var a={};for(var u in n)hasOwnProperty.call(n,u)&&(a[u]=n[u]);a.originalType=e,a[p]="string"==typeof e?e:o,i[1]=a;for(var c=2;c<s;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7646:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const s={},i="Messages",a={unversionedId:"neutron/tokenomics/distribution/messages",id:"version-1.0/neutron/tokenomics/distribution/messages",title:"Messages",description:"InstantiateMsg",source:"@site/versioned_docs/version-1.0/neutron/tokenomics/distribution/messages.md",sourceDirName:"neutron/tokenomics/distribution",slug:"/neutron/tokenomics/distribution/messages",permalink:"/neutron-docs/1.0/neutron/tokenomics/distribution/messages",draft:!1,tags:[],version:"1.0",frontMatter:{},sidebar:"docs",previous:{title:"Overview",permalink:"/neutron-docs/1.0/neutron/tokenomics/distribution/overview"},next:{title:"Queries",permalink:"/neutron-docs/1.0/neutron/tokenomics/distribution/queries"}},u={},c=[{value:"InstantiateMsg",id:"instantiatemsg",level:2},{value:"ExecuteMsg",id:"executemsg",level:2}],l={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"messages"},"Messages"),(0,o.kt)("h2",{id:"instantiatemsg"},"InstantiateMsg"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct InstantiateMsg {\n    /// Denom used for rewards distribution. All funds in any other denoms will be ignored.\n    pub denom: String,\n    /// The address of the Neutron DAO. It's capable of pausing and unpausing the contract\n    pub main_dao_address: String,\n    /// The address of the DAO guardian. The security DAO is capable only of pausing the contract.\n    pub security_dao_address: String,\n}\n")),(0,o.kt)("h2",{id:"executemsg"},"ExecuteMsg"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub enum ExecuteMsg {\n    /// Transfer the contract's ownership to another account [permissioned - executable only by Neutron DAO]\n    TransferOwnership(String),\n    /// Alter shareholder's weights [permissioned - executable only by Neutron DAO]\n    SetShares {\n        shares: Vec<(String, Uint128)>,\n    },\n    /// Send money to contract and distribute it between shareholders [permissionless]\n    Fund {},\n    /// Claim rewards if caller has any [permissionless, but only shareholders are able to withdraw rewards]\n    Claim {},\n    /// pause contract for specified duration [permissioned - executable only by Neutron DAO or Security DAO]\n    Pause {\n        duration: u64,\n    },\n    /// Unpause contract if paused [permissioned - executable only by Neutron DAO]\n    Unpause {},\n}\n")))}d.isMDXComponent=!0}}]);